/*
 *  Copyright (C) 2010 nickapos
 * 
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * AboutWindow.java
 * This class will create a window with a text area and depending on the need
 * will present in the text are a message, be it an about or a readme.
 * Created on 11 Αυγ 2010, 9:51:33 μμ
 */
package gr.oncrete.nick.myCrop.UserInterface;

import gr.oncrete.nick.myCrop.BusinessLogic.SelectInfo.*;
import gr.oncrete.nick.myCrop.BusinessLogic.UpdateInfo.UpdateFertRecipyRecord;
import gr.oncrete.nick.myCrop.BusinessLogic.*;
import java.util.*;

/**
 *
 * @author nickapos
 */
public class NutrientDelpetionEstimateWindow extends javax.swing.JFrame {

    /** Creates new form AboutWindow */
    ArrayList<String[]> currentReport;//a report table used in save report as txt

    public NutrientDelpetionEstimateWindow() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cropNfieldsPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        farmFieldsComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        cropTypeComboBox = new javax.swing.JComboBox();
        timePeriodPanel = new javax.swing.JPanel();
        jLabel42 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        startYearComboBox = new javax.swing.JComboBox();
        startMonthComboBox = new javax.swing.JComboBox();
        jLabel43 = new javax.swing.JLabel();
        endYearComboBox = new javax.swing.JComboBox();
        endMonthComboBox = new javax.swing.JComboBox();
        resultPanel = new javax.swing.JPanel();
        resultsScrollPane = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("gr/oncrete/nick/myCrop/UserInterface/Bundle"); // NOI18N
        setTitle(bundle.getString("NutrientDelpetionEstimateWindow.title")); // NOI18N
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        cropNfieldsPanel.setLayout(new java.awt.GridLayout(2, 2));

        jLabel5.setText(bundle.getString("NutrientDelpetionEstimateWindow.jLabel5.text")); // NOI18N
        cropNfieldsPanel.add(jLabel5);

        farmFieldsComboBox.setModel(new javax.swing.DefaultComboBoxModel(this.getFieldsCombo()));
        farmFieldsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                farmFieldsComboBoxActionPerformed(evt);
            }
        });
        cropNfieldsPanel.add(farmFieldsComboBox);

        jLabel4.setText(bundle.getString("NutrientDelpetionEstimateWindow.jLabel4.text")); // NOI18N
        cropNfieldsPanel.add(jLabel4);

        cropTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cropTypeComboBoxActionPerformed(evt);
            }
        });
        cropNfieldsPanel.add(cropTypeComboBox);

        getContentPane().add(cropNfieldsPanel);

        jLabel42.setText(bundle.getString("NutrientDelpetionEstimateWindow.jLabel42.text")); // NOI18N
        timePeriodPanel.add(jLabel42);

        jLabel41.setText(bundle.getString("NutrientDelpetionEstimateWindow.jLabel41.text")); // NOI18N
        timePeriodPanel.add(jLabel41);

        startYearComboBox.setModel(new javax.swing.DefaultComboBoxModel(this.fillComboWithYears()));
        startYearComboBox.setEnabled(false);
        startYearComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startYearComboBoxActionPerformed(evt);
            }
        });
        timePeriodPanel.add(startYearComboBox);

        startMonthComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        startMonthComboBox.setEnabled(false);
        startMonthComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startMonthComboBoxActionPerformed(evt);
            }
        });
        timePeriodPanel.add(startMonthComboBox);

        jLabel43.setText(bundle.getString("NutrientDelpetionEstimateWindow.jLabel43.text")); // NOI18N
        timePeriodPanel.add(jLabel43);

        endYearComboBox.setModel(new javax.swing.DefaultComboBoxModel(this.fillComboWithYears()));
        endYearComboBox.setEnabled(false);
        endYearComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endYearComboBoxActionPerformed(evt);
            }
        });
        timePeriodPanel.add(endYearComboBox);

        endMonthComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        endMonthComboBox.setEnabled(false);
        endMonthComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endMonthComboBoxActionPerformed(evt);
            }
        });
        timePeriodPanel.add(endMonthComboBox);

        getContentPane().add(timePeriodPanel);

        resultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Nutrient Type", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultsScrollPane.setViewportView(resultsTable);
        resultsTable.getColumnModel().getColumn(0).setHeaderValue(bundle.getString("NutrientDelpetionEstimateWindow.resultsTable.columnModel.title0")); // NOI18N
        resultsTable.getColumnModel().getColumn(1).setHeaderValue(bundle.getString("NutrientDelpetionEstimateWindow.resultsTable.columnModel.title1")); // NOI18N

        resultPanel.add(resultsScrollPane);

        getContentPane().add(resultPanel);

        getAccessibleContext().setAccessibleName(bundle.getString("NutrientTypesWindow.AccessibleContext.accessibleName")); // NOI18N

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cropTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cropTypeComboBoxActionPerformed
        startYearComboBox.setEnabled(true);
        startMonthComboBox.setEnabled(true);
        endYearComboBox.setEnabled(true);
        endMonthComboBox.setEnabled(true);
        this.fillResultsTable();
    }//GEN-LAST:event_cropTypeComboBoxActionPerformed

    private void farmFieldsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_farmFieldsComboBoxActionPerformed
        String fieldSelection = (String) farmFieldsComboBox.getSelectedItem();
        SelectFarmFieldDetails field = new SelectFarmFieldDetails();
        field.SelectFarmFieldDetailsWithName(fieldSelection);
        cropTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(this.getCropsInAFieldCombo(field.getID())));
         startYearComboBox.setEnabled(true);
        startMonthComboBox.setEnabled(true);
        endYearComboBox.setEnabled(true);
        endMonthComboBox.setEnabled(true);
        this.fillResultsTable();
    }//GEN-LAST:event_farmFieldsComboBoxActionPerformed

    private void startYearComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startYearComboBoxActionPerformed
        this.fillResultsTable();
    }//GEN-LAST:event_startYearComboBoxActionPerformed

    private void startMonthComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startMonthComboBoxActionPerformed
        this.fillResultsTable();        // TODO add your handling code here:
    }//GEN-LAST:event_startMonthComboBoxActionPerformed

    private void endYearComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endYearComboBoxActionPerformed
        this.fillResultsTable();
    }//GEN-LAST:event_endYearComboBoxActionPerformed

    private void endMonthComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endMonthComboBoxActionPerformed
        this.fillResultsTable();
    }//GEN-LAST:event_endMonthComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new NutrientDelpetionEstimateWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel cropNfieldsPanel;
    private javax.swing.JComboBox cropTypeComboBox;
    private javax.swing.JComboBox endMonthComboBox;
    private javax.swing.JComboBox endYearComboBox;
    private javax.swing.JComboBox farmFieldsComboBox;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel resultPanel;
    private javax.swing.JScrollPane resultsScrollPane;
    private javax.swing.JTable resultsTable;
    private javax.swing.JComboBox startMonthComboBox;
    private javax.swing.JComboBox startYearComboBox;
    private javax.swing.JPanel timePeriodPanel;
    // End of variables declaration//GEN-END:variables

    private String[] getCropTypeCombo() {
        CropType cr = new CropType();
        return cr.names();
    }

    private String[] getCropsInAFieldCombo(String id) {
        CropFieldsWithID fl = new CropFieldsWithID(id);
        return fl.names();
    }

    private String[] getFieldsCombo() {
        FarmFields fl = new FarmFields();
        return fl.names();
    }

    private void refreshCropTypeCombo() {
        farmFieldsComboBox.setModel(new javax.swing.DefaultComboBoxModel(this.getCropTypeCombo()));
    }

    /**
     * this method will prepare the data necessary to present the nutrient depletion in a jtable
     *
     */
    private void reportNutrientDepletion(HashMap recipyMap) {

        Set keySet=recipyMap.keySet();
        Object[][] d = new Object[recipyMap.size()][2];
        Iterator i=keySet.iterator();
        int z=0;
        while(i.hasNext())
        {
            //get the key an put it in the first cell of the table
            d[z][0]=(String)i.next();
            //get the map and put it in the second cell of the table
            d[z][1]=recipyMap.get(d[z][0]);
                    z++;
        }
        String[] columnNames = {java.util.ResourceBundle.getBundle("gr/oncrete/nick/myCrop/UserInterface/Bundle").getString("NUTRIENT_TYPE"), java.util.ResourceBundle.getBundle("gr/oncrete/nick/myCrop/UserInterface/Bundle").getString("QUANTITY")};
        
        if (recipyMap.size() > 0) {
            resultsTable.setModel(new MyTableModel(d, columnNames));
            resultsTable.setAutoCreateRowSorter(true);//add a primitive sort by column function
        }

    }

    /**
     *
     * this private method will be used when we want to fill a combobox with year numbers
     * @return
     */
    private String[] fillComboWithYears() {
        int startyear = 2006;
        String[] years = new String[25];
        for (int o = startyear, i = 0; i < 25; o++, i++) {
            years[i] = "" + o;
        }
        return years;
    }

    private void fillResultsTable() {
        String fname = (String) farmFieldsComboBox.getSelectedItem();
        String croptype = (String) cropTypeComboBox.getSelectedItem();
        SelectCropTypeDetails ctd = new SelectCropTypeDetails();
        ctd.SelectCropTypeDetailsWithName(croptype);
        String cid = ctd.getID();
        //get the recipy in a map
        SelectAllRecipiesForACropType alrc = new SelectAllRecipiesForACropType(cid);
        HashMap recipyMap=alrc.getRecipyTuples();
        Set keySet=recipyMap.keySet();

        //get the total production
        SelectAllProductionDetailsForASpecificCropAndFieldInPeriod a = new SelectAllProductionDetailsForASpecificCropAndFieldInPeriod(croptype, fname, this.validatePeriodString());
        double totalproduction =Double.parseDouble(a.returnTotalProductionQuantity());
        //iterate through the recipy and multiply the recipy with the total production
        Iterator i=keySet.iterator();
        while(i.hasNext())
        {
            String key =(String) i.next();
            String value =(String) recipyMap.get(key);
            double dValue=Double.parseDouble(value);
            recipyMap.put(key, ""+dValue*totalproduction+java.util.ResourceBundle.getBundle("gr/oncrete/nick/myCrop/UserInterface/Bundle").getString("KGR"));
        }
        this.reportNutrientDepletion(recipyMap);
    }

    /**
     * this method will read the start and end period values
     * validate them and format them so that they have meaning
     *
     * e.g if the user chooses a start period after the end period
     * the method will reverse the choice
     */
    private String validatePeriodString() {
        String period = "";
        String startMonth = (String) startMonthComboBox.getSelectedItem();
        int iStartMonth = Integer.parseInt(startMonth);
        String startYear = (String) startYearComboBox.getSelectedItem();
        int iStartYear = Integer.parseInt(startYear);
        String endMonth = (String) endMonthComboBox.getSelectedItem();
        int iEndMonth = Integer.parseInt(endMonth);
        String endYear = (String) endYearComboBox.getSelectedItem();
        int iEndYear = Integer.parseInt(endYear);


        String startS = "";
        String midS = "";

        startS = "and a.dateofharvest > '";
        midS = "' and a.dateofharvest < '";

        if (iStartYear > iEndYear) {
            period = startS + endYear + "-" + endMonth + "-01" + midS + startYear + "-" + startMonth + "-31'";
        } else if (iStartYear == iEndYear) {
            if (iStartMonth > iEndMonth) {
                period = startS + startYear + "-" + endMonth + "-01" + midS + endYear + "-" + startMonth + "-31'";
            } else {
                period = startS + startYear + "-" + startMonth + "-01" + midS + endYear + "-" + endMonth + "-31'";
            }
        } else {
            period = startS + startYear + "-" + startMonth + "-01" + midS + endYear + "-" + endMonth + "-31'";
        }
        return period;
    }

    /**
     * make the window appear in the appropriate thread
     * to be called from inside the main application frame
     *
     */
    public void displayWindow() {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new NutrientDelpetionEstimateWindow().setVisible(true);
            }
        });
    }
}
