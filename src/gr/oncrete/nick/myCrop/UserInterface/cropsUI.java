/*
myCrop, crop managment program
Copyright (C) 2010  Nick Apostolakis

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * cropsUI.java
 *
 * Created on 15 Ιουν 2010, 11:05:26 μμ
 */
package gr.oncrete.nick.myCrop.UserInterface;

import gr.oncrete.nick.myCrop.BusinessLogic.SelectInfo.DumpDatabase;
import gr.oncrete.nick.myCrop.BusinessLogic.UpdateInfo.UpdateCropTypeRecord;
import gr.oncrete.nick.myCrop.BusinessLogic.UpdateInfo.UpdateApplicationTypeRecord;
import gr.oncrete.nick.myCrop.BusinessLogic.UpdateInfo.UpdateFarmFieldRecord;
import gr.oncrete.nick.myCrop.BusinessLogic.UpdateInfo.UpdateCropFieldRecord;
import gr.oncrete.nick.myCrop.BusinessLogic.UpdateInfo.UpdateProductionRecord;
import gr.oncrete.nick.myCrop.BusinessLogic.UpdateInfo.UpdateApplicationRecord;
import gr.oncrete.nick.myCrop.BusinessLogic.SelectInfo.*;
import gr.oncrete.nick.myCrop.BusinessLogic.ImportDB.*;
import gr.oncrete.nick.myCrop.BusinessLogic.*;
import javax.swing.*;
import java.util.*;
import jahuwaldt.plot.*;
import java.awt.*;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import gr.oncrete.nick.myCrop.BusinessLogic.FileHandlers.*;

/**
 *
 * @author nickapos
 */
public class cropsUI extends javax.swing.JFrame {

    //just the plot panel
    PlotPanel plPanel;
    ArrayList<String[]> currentReport;//a report table used in save report as txt
    int reportParametersComboBoxSentinel = 0;//an integer that will monitor the status of the reportParameters combobox
    String[] comboBoxActions = {java.util.ResourceBundle.getBundle("gr/oncrete/nick/myCrop/UserInterface/Bundle").getString("INSERT"), java.util.ResourceBundle.getBundle("gr/oncrete/nick/myCrop/UserInterface/Bundle").getString("EDIT"), java.util.ResourceBundle.getBundle("gr/oncrete/nick/myCrop/UserInterface/Bundle").getString("DELETE")};
    String[] comboBoxReports = {java.util.ResourceBundle.getBundle("gr/oncrete/nick/myCrop/UserInterface/Bundle").getString("CROP-TYPES"),
        java.util.ResourceBundle.getBundle("gr/oncrete/nick/myCrop/UserInterface/Bundle").getString("PRODUCTION"),
        java.util.ResourceBundle.getBundle("gr/oncrete/nick/myCrop/UserInterface/Bundle").getString("CROP-FIELDS"),
        java.util.ResourceBundle.getBundle("gr/oncrete/nick/myCrop/UserInterface/Bundle").getString("FARM-FIELDS"),
        java.util.ResourceBundle.getBundle("gr/oncrete/nick/myCrop/UserInterface/Bundle").getString("APPLICATION-TYPES"),
        java.util.ResourceBundle.getBundle("gr/oncrete/nick/myCrop/UserInterface/Bundle").getString("APPLICATIONS"),
        java.util.ResourceBundle.getBundle("gr/oncrete/nick/myCrop/UserInterface/Bundle").getString("TOTAL-PRODUCTION-OF-CROP"),
        java.util.ResourceBundle.getBundle("gr/oncrete/nick/myCrop/UserInterface/Bundle").getString("APPLICATIONS-PER-CROP-FIELD"),
        java.util.ResourceBundle.getBundle("gr/oncrete/nick/myCrop/UserInterface/Bundle").getString("TOTAL-PRODUCTION-OF-CROP-IN-PERIOD"),
        java.util.ResourceBundle.getBundle("gr/oncrete/nick/myCrop/UserInterface/Bundle").getString("PRODUCTION-PER-FIELD-CROP-IN-DATE-PERIOD"),
        java.util.ResourceBundle.getBundle("gr/oncrete/nick/myCrop/UserInterface/Bundle").getString("APPLICATIONS-PER-CROP-FIELD-FOR-PERIOD")
    };

    /** Creates new form cropsUI */
    public cropsUI() {
        initComponents();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabs = new javax.swing.JTabbedPane();
        InsertEditProduction = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        inserEditProductionComboBox = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        prodIdTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        prodCropFieldComboBox = new javax.swing.JComboBox();
        jLabel25 = new javax.swing.JLabel();
        cropTypeInFieldComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        dateOfHarvestTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        quantityTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        productionObservationsTextField = new javax.swing.JTextField();
        productionRetrieveButton = new javax.swing.JButton();
        productionGoButton = new javax.swing.JButton();
        InsertEditApplication = new javax.swing.JPanel();
        jLabel32 = new javax.swing.JLabel();
        applicationActionComboBox = new javax.swing.JComboBox();
        jLabel33 = new javax.swing.JLabel();
        appIDTextField = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        appFieldNameComboBox = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        appCropTypeComboBox = new javax.swing.JComboBox();
        jLabel40 = new javax.swing.JLabel();
        appTypeComboBox = new javax.swing.JComboBox();
        jLabel36 = new javax.swing.JLabel();
        appQuantityTextField = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        appExpensesTextField = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        appDateOfApplicationTextField = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        appObservationsTextArea = new javax.swing.JTextArea();
        applicationRetrieveButton = new javax.swing.JButton();
        insertEditApplicationGoButton = new javax.swing.JButton();
        InsertEditCropForAField = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        cropFieldActionComboBox = new javax.swing.JComboBox();
        jLabel16 = new javax.swing.JLabel();
        cropFieldIDTextField = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        cropTypeComboBox = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        fieldComboBox = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        cropFieldTextArea = new javax.swing.JTextArea();
        cropFieldRetrieveButton = new javax.swing.JButton();
        cropFieldGoButton = new javax.swing.JButton();
        InsertEditCropTypePanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        cropTypeDetailsComboBox = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        cropTypeDetailsIDTextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        cropTypeDetailsNameTextField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        cropTypeDetailsObservation = new javax.swing.JTextArea();
        cropTypeRetrieveButton = new javax.swing.JButton();
        cropTypeDetailsGoButton = new javax.swing.JButton();
        InsertEditFieldPanel = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        fieldActionComboBox = new javax.swing.JComboBox();
        jLabel27 = new javax.swing.JLabel();
        farmfieldIDTextField = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        farmFieldNameTextField = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        farmFieldSizeTextField = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        farmfieldNBorderTextField = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        farmfieldEBorderTextField = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        farmfieldSBorderTextField = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        farmfieldWBorderTextField = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        farmfieldObsTextField = new javax.swing.JTextPane();
        farmFieldRetrieveButton = new javax.swing.JButton();
        farmfieldGoButton = new javax.swing.JButton();
        InsertEditApplicationType = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        insertEditApplicationTypeCombo = new javax.swing.JComboBox();
        jLabel29 = new javax.swing.JLabel();
        appTypeIDTextField = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        appTypeNameTextField = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        appObsTextField = new javax.swing.JTextField();
        appTypeRetrieveButton = new javax.swing.JButton();
        appTypeGoButton = new javax.swing.JButton();
        ReportsPanel = new javax.swing.JPanel();
        reportsTypePanel = new javax.swing.JPanel();
        reportsLabel = new javax.swing.JLabel();
        reportComboBox = new javax.swing.JComboBox();
        reportParametersPanel = new javax.swing.JPanel();
        reportsParametersLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        reportParametersComboBox = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        reportsParameter2ComboBox = new javax.swing.JComboBox();
        jLabel42 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        startMonthComboBox = new javax.swing.JComboBox();
        startYearComboBox = new javax.swing.JComboBox();
        jLabel43 = new javax.swing.JLabel();
        endMonthComboBox = new javax.swing.JComboBox();
        endYearComboBox = new javax.swing.JComboBox();
        reportsResultsScrollPane = new javax.swing.JScrollPane();
        reportTable = new javax.swing.JTable();
        reportButtonPanel = new javax.swing.JPanel();
        reportButton = new javax.swing.JButton();
        saveReportAsCsvButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        operationsMenu = new javax.swing.JMenu();
        importMainMenu = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        exportMainMenu = new javax.swing.JMenu();
        exportDBMenuItem = new javax.swing.JMenuItem();
        exportSurveyorDataMenuItem = new javax.swing.JMenuItem();
        exequteSqlMenuItem = new javax.swing.JMenuItem();
        emptyDBMenuItem = new javax.swing.JMenuItem();
        shutdownMenuItem = new javax.swing.JMenuItem();
        advFeaturesMenu = new javax.swing.JMenu();
        fertilizerRecipiesMenu = new javax.swing.JMenu();
        nutTypesManagmentMenuItem = new javax.swing.JMenuItem();
        fertilizerRecipiesManagmentMenuItem = new javax.swing.JMenuItem();
        nutrientDepletionMenuItem = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        aboutMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("gr/oncrete/nick/myCrop/UserInterface/Bundle"); // NOI18N
        setTitle(bundle.getString("cropsUI.title")); // NOI18N

        tabs.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        tabs.setTabPlacement(javax.swing.JTabbedPane.RIGHT);

        InsertEditProduction.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createCompoundBorder(), javax.swing.BorderFactory.createCompoundBorder()));
        InsertEditProduction.setLayout(new java.awt.GridLayout(8, 2, 1, 1));

        jLabel8.setText(bundle.getString("cropsUI.jLabel8.text")); // NOI18N
        InsertEditProduction.add(jLabel8);

        inserEditProductionComboBox.setModel(new javax.swing.DefaultComboBoxModel(comboBoxActions));
        inserEditProductionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserEditProductionComboBoxActionPerformed(evt);
            }
        });
        InsertEditProduction.add(inserEditProductionComboBox);

        jLabel6.setText(bundle.getString("cropsUI.jLabel6.text")); // NOI18N
        InsertEditProduction.add(jLabel6);

        prodIdTextField.setEditable(false);
        prodIdTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prodIdTextFieldActionPerformed(evt);
            }
        });
        InsertEditProduction.add(prodIdTextField);

        jLabel1.setText(bundle.getString("cropsUI.jLabel1.text")); // NOI18N
        InsertEditProduction.add(jLabel1);

        prodCropFieldComboBox.setModel(new javax.swing.DefaultComboBoxModel(this.getFieldsCombo()));
        prodCropFieldComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prodCropFieldComboBoxActionPerformed(evt);
            }
        });
        InsertEditProduction.add(prodCropFieldComboBox);

        jLabel25.setText(bundle.getString("cropsUI.jLabel25.text")); // NOI18N
        InsertEditProduction.add(jLabel25);

        cropTypeInFieldComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please select a field first--" }));
        InsertEditProduction.add(cropTypeInFieldComboBox);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText(bundle.getString("cropsUI.jLabel2.text")); // NOI18N
        InsertEditProduction.add(jLabel2);
        InsertEditProduction.add(dateOfHarvestTextField);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setText(bundle.getString("cropsUI.jLabel3.text")); // NOI18N
        InsertEditProduction.add(jLabel3);
        InsertEditProduction.add(quantityTextField);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText(bundle.getString("cropsUI.jLabel4.text")); // NOI18N
        InsertEditProduction.add(jLabel4);
        InsertEditProduction.add(productionObservationsTextField);

        productionRetrieveButton.setText(bundle.getString("cropsUI.productionRetrieveButton.text")); // NOI18N
        productionRetrieveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productionRetrieveButtonActionPerformed(evt);
            }
        });
        InsertEditProduction.add(productionRetrieveButton);

        productionGoButton.setText(bundle.getString("cropsUI.productionGoButton.text")); // NOI18N
        productionGoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productionGoButtonActionPerformed(evt);
            }
        });
        InsertEditProduction.add(productionGoButton);

        tabs.addTab(bundle.getString("cropsUI.InsertEditProduction.TabConstraints.tabTitle"), InsertEditProduction); // NOI18N

        InsertEditApplication.setLayout(new java.awt.GridLayout(10, 2));

        jLabel32.setText(bundle.getString("cropsUI.jLabel32.text")); // NOI18N
        InsertEditApplication.add(jLabel32);

        applicationActionComboBox.setModel(new javax.swing.DefaultComboBoxModel(comboBoxActions));
        applicationActionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applicationActionComboBoxActionPerformed(evt);
            }
        });
        InsertEditApplication.add(applicationActionComboBox);

        jLabel33.setText(bundle.getString("cropsUI.jLabel33.text")); // NOI18N
        InsertEditApplication.add(jLabel33);

        appIDTextField.setEditable(false);
        InsertEditApplication.add(appIDTextField);

        jLabel35.setText(bundle.getString("cropsUI.jLabel35.text")); // NOI18N
        InsertEditApplication.add(jLabel35);

        appFieldNameComboBox.setModel(new javax.swing.DefaultComboBoxModel(this.getFieldsCombo()));
        appFieldNameComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appFieldNameComboBoxActionPerformed(evt);
            }
        });
        InsertEditApplication.add(appFieldNameComboBox);

        jLabel34.setText(bundle.getString("cropsUI.jLabel34.text")); // NOI18N
        InsertEditApplication.add(jLabel34);

        appCropTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Please select a field first--" }));
        InsertEditApplication.add(appCropTypeComboBox);

        jLabel40.setText(bundle.getString("cropsUI.jLabel40.text")); // NOI18N
        InsertEditApplication.add(jLabel40);

        appTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(this.getApplicationTypeCombo()));
        InsertEditApplication.add(appTypeComboBox);

        jLabel36.setText(bundle.getString("cropsUI.jLabel36.text")); // NOI18N
        InsertEditApplication.add(jLabel36);

        appQuantityTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appQuantityTextFieldActionPerformed(evt);
            }
        });
        InsertEditApplication.add(appQuantityTextField);

        jLabel37.setText(bundle.getString("cropsUI.jLabel37.text")); // NOI18N
        InsertEditApplication.add(jLabel37);
        InsertEditApplication.add(appExpensesTextField);

        jLabel38.setText(bundle.getString("cropsUI.jLabel38.text")); // NOI18N
        InsertEditApplication.add(jLabel38);
        InsertEditApplication.add(appDateOfApplicationTextField);

        jLabel39.setText(bundle.getString("cropsUI.jLabel39.text")); // NOI18N
        InsertEditApplication.add(jLabel39);

        appObservationsTextArea.setColumns(20);
        appObservationsTextArea.setRows(5);
        jScrollPane5.setViewportView(appObservationsTextArea);

        InsertEditApplication.add(jScrollPane5);

        applicationRetrieveButton.setText(bundle.getString("cropsUI.applicationRetrieveButton.text")); // NOI18N
        applicationRetrieveButton.setEnabled(false);
        applicationRetrieveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applicationRetrieveButtonActionPerformed(evt);
            }
        });
        InsertEditApplication.add(applicationRetrieveButton);

        insertEditApplicationGoButton.setText(bundle.getString("cropsUI.insertEditApplicationGoButton.text")); // NOI18N
        insertEditApplicationGoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertEditApplicationGoButtonActionPerformed(evt);
            }
        });
        InsertEditApplication.add(insertEditApplicationGoButton);

        tabs.addTab(bundle.getString("cropsUI.InsertEditApplication.TabConstraints.tabTitle"), InsertEditApplication); // NOI18N

        InsertEditCropForAField.setLayout(new java.awt.GridLayout(6, 2));

        jLabel13.setText(bundle.getString("cropsUI.jLabel13.text")); // NOI18N
        InsertEditCropForAField.add(jLabel13);

        cropFieldActionComboBox.setModel(new javax.swing.DefaultComboBoxModel(comboBoxActions));
        cropFieldActionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cropFieldActionComboBoxActionPerformed(evt);
            }
        });
        InsertEditCropForAField.add(cropFieldActionComboBox);

        jLabel16.setText(bundle.getString("cropsUI.jLabel16.text")); // NOI18N
        InsertEditCropForAField.add(jLabel16);

        cropFieldIDTextField.setEditable(false);
        cropFieldIDTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cropFieldIDTextFieldActionPerformed(evt);
            }
        });
        InsertEditCropForAField.add(cropFieldIDTextField);

        jLabel17.setText(bundle.getString("cropsUI.jLabel17.text")); // NOI18N
        InsertEditCropForAField.add(jLabel17);

        cropTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(this.getCropTypeCombo()));
        InsertEditCropForAField.add(cropTypeComboBox);

        jLabel14.setText(bundle.getString("cropsUI.jLabel14.text")); // NOI18N
        InsertEditCropForAField.add(jLabel14);

        fieldComboBox.setModel(new javax.swing.DefaultComboBoxModel(this.getFieldsCombo()));
        InsertEditCropForAField.add(fieldComboBox);

        jLabel15.setText(bundle.getString("cropsUI.jLabel15.text")); // NOI18N
        InsertEditCropForAField.add(jLabel15);

        cropFieldTextArea.setColumns(20);
        cropFieldTextArea.setRows(5);
        jScrollPane4.setViewportView(cropFieldTextArea);

        InsertEditCropForAField.add(jScrollPane4);

        cropFieldRetrieveButton.setText(bundle.getString("cropsUI.cropFieldRetrieveButton.text")); // NOI18N
        cropFieldRetrieveButton.setEnabled(false);
        cropFieldRetrieveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cropFieldRetrieveButtonActionPerformed(evt);
            }
        });
        InsertEditCropForAField.add(cropFieldRetrieveButton);

        cropFieldGoButton.setText(bundle.getString("cropsUI.cropFieldGoButton.text")); // NOI18N
        cropFieldGoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cropFieldGoButtonActionPerformed(evt);
            }
        });
        InsertEditCropForAField.add(cropFieldGoButton);

        tabs.addTab(bundle.getString("cropsUI.InsertEditCropForAField.TabConstraints.tabTitle"), InsertEditCropForAField); // NOI18N

        InsertEditCropTypePanel.setLayout(new java.awt.GridLayout(5, 2));

        jLabel5.setText(bundle.getString("cropsUI.jLabel5.text")); // NOI18N
        InsertEditCropTypePanel.add(jLabel5);

        cropTypeDetailsComboBox.setModel(new javax.swing.DefaultComboBoxModel(comboBoxActions));
        cropTypeDetailsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cropTypeDetailsComboBoxActionPerformed(evt);
            }
        });
        InsertEditCropTypePanel.add(cropTypeDetailsComboBox);

        jLabel9.setText(bundle.getString("cropsUI.jLabel9.text")); // NOI18N
        InsertEditCropTypePanel.add(jLabel9);

        cropTypeDetailsIDTextField.setEditable(false);
        InsertEditCropTypePanel.add(cropTypeDetailsIDTextField);

        jLabel10.setText(bundle.getString("cropsUI.jLabel10.text")); // NOI18N
        InsertEditCropTypePanel.add(jLabel10);
        InsertEditCropTypePanel.add(cropTypeDetailsNameTextField);

        jLabel12.setText(bundle.getString("cropsUI.jLabel12.text")); // NOI18N
        InsertEditCropTypePanel.add(jLabel12);

        cropTypeDetailsObservation.setColumns(20);
        cropTypeDetailsObservation.setRows(5);
        jScrollPane3.setViewportView(cropTypeDetailsObservation);

        InsertEditCropTypePanel.add(jScrollPane3);

        cropTypeRetrieveButton.setText(bundle.getString("cropsUI.cropTypeRetrieveButton.text")); // NOI18N
        cropTypeRetrieveButton.setEnabled(false);
        cropTypeRetrieveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cropTypeRetrieveButtonActionPerformed(evt);
            }
        });
        InsertEditCropTypePanel.add(cropTypeRetrieveButton);

        cropTypeDetailsGoButton.setText(bundle.getString("cropsUI.cropTypeDetailsGoButton.text")); // NOI18N
        cropTypeDetailsGoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cropTypeDetailsGoButtonActionPerformed(evt);
            }
        });
        InsertEditCropTypePanel.add(cropTypeDetailsGoButton);

        tabs.addTab(bundle.getString("cropsUI.InsertEditCropTypePanel.TabConstraints.tabTitle"), InsertEditCropTypePanel); // NOI18N

        InsertEditFieldPanel.setLayout(new java.awt.GridLayout(10, 2));

        jLabel18.setText(bundle.getString("cropsUI.jLabel18.text")); // NOI18N
        InsertEditFieldPanel.add(jLabel18);

        fieldActionComboBox.setModel(new javax.swing.DefaultComboBoxModel(comboBoxActions));
        fieldActionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldActionComboBoxActionPerformed(evt);
            }
        });
        InsertEditFieldPanel.add(fieldActionComboBox);

        jLabel27.setText(bundle.getString("cropsUI.jLabel27.text")); // NOI18N
        InsertEditFieldPanel.add(jLabel27);

        farmfieldIDTextField.setEditable(false);
        InsertEditFieldPanel.add(farmfieldIDTextField);

        jLabel19.setText(bundle.getString("cropsUI.jLabel19.text")); // NOI18N
        InsertEditFieldPanel.add(jLabel19);

        farmFieldNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                farmFieldNameTextFieldActionPerformed(evt);
            }
        });
        InsertEditFieldPanel.add(farmFieldNameTextField);

        jLabel20.setText(bundle.getString("cropsUI.jLabel20.text")); // NOI18N
        InsertEditFieldPanel.add(jLabel20);
        InsertEditFieldPanel.add(farmFieldSizeTextField);

        jLabel21.setText(bundle.getString("cropsUI.jLabel21.text")); // NOI18N
        InsertEditFieldPanel.add(jLabel21);
        InsertEditFieldPanel.add(farmfieldNBorderTextField);

        jLabel22.setText(bundle.getString("cropsUI.jLabel22.text")); // NOI18N
        InsertEditFieldPanel.add(jLabel22);
        InsertEditFieldPanel.add(farmfieldEBorderTextField);

        jLabel23.setText(bundle.getString("cropsUI.jLabel23.text")); // NOI18N
        InsertEditFieldPanel.add(jLabel23);
        InsertEditFieldPanel.add(farmfieldSBorderTextField);

        jLabel24.setText(bundle.getString("cropsUI.jLabel24.text")); // NOI18N
        InsertEditFieldPanel.add(jLabel24);
        InsertEditFieldPanel.add(farmfieldWBorderTextField);

        jLabel26.setText(bundle.getString("cropsUI.jLabel26.text")); // NOI18N
        InsertEditFieldPanel.add(jLabel26);

        jScrollPane2.setViewportView(farmfieldObsTextField);

        InsertEditFieldPanel.add(jScrollPane2);

        farmFieldRetrieveButton.setText(bundle.getString("cropsUI.farmFieldRetrieveButton.text")); // NOI18N
        farmFieldRetrieveButton.setEnabled(false);
        farmFieldRetrieveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                farmFieldRetrieveButtonActionPerformed(evt);
            }
        });
        InsertEditFieldPanel.add(farmFieldRetrieveButton);

        farmfieldGoButton.setText(bundle.getString("cropsUI.farmfieldGoButton.text")); // NOI18N
        farmfieldGoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                farmfieldGoButtonActionPerformed(evt);
            }
        });
        InsertEditFieldPanel.add(farmfieldGoButton);

        tabs.addTab(bundle.getString("cropsUI.InsertEditFieldPanel.TabConstraints.tabTitle"), InsertEditFieldPanel); // NOI18N

        InsertEditApplicationType.setLayout(new java.awt.GridLayout(5, 2));

        jLabel28.setText(bundle.getString("cropsUI.jLabel28.text")); // NOI18N
        InsertEditApplicationType.add(jLabel28);

        insertEditApplicationTypeCombo.setModel(new javax.swing.DefaultComboBoxModel(comboBoxActions));
        insertEditApplicationTypeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertEditApplicationTypeComboActionPerformed(evt);
            }
        });
        InsertEditApplicationType.add(insertEditApplicationTypeCombo);

        jLabel29.setText(bundle.getString("cropsUI.jLabel29.text")); // NOI18N
        InsertEditApplicationType.add(jLabel29);

        appTypeIDTextField.setEditable(false);
        InsertEditApplicationType.add(appTypeIDTextField);

        jLabel30.setText(bundle.getString("cropsUI.jLabel30.text")); // NOI18N
        InsertEditApplicationType.add(jLabel30);
        InsertEditApplicationType.add(appTypeNameTextField);

        jLabel31.setText(bundle.getString("cropsUI.jLabel31.text")); // NOI18N
        InsertEditApplicationType.add(jLabel31);
        InsertEditApplicationType.add(appObsTextField);

        appTypeRetrieveButton.setText(bundle.getString("cropsUI.appTypeRetrieveButton.text")); // NOI18N
        appTypeRetrieveButton.setEnabled(false);
        appTypeRetrieveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appTypeRetrieveButtonActionPerformed(evt);
            }
        });
        InsertEditApplicationType.add(appTypeRetrieveButton);

        appTypeGoButton.setText(bundle.getString("cropsUI.appTypeGoButton.text")); // NOI18N
        appTypeGoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appTypeGoButtonActionPerformed(evt);
            }
        });
        InsertEditApplicationType.add(appTypeGoButton);

        tabs.addTab(bundle.getString("cropsUI.InsertEditApplicationType.TabConstraints.tabTitle"), InsertEditApplicationType); // NOI18N

        ReportsPanel.setLayout(new javax.swing.BoxLayout(ReportsPanel, javax.swing.BoxLayout.Y_AXIS));

        reportsLabel.setText(bundle.getString("cropsUI.reportsLabel.text")); // NOI18N
        reportsTypePanel.add(reportsLabel);

        reportComboBox.setModel(new javax.swing.DefaultComboBoxModel(comboBoxReports));
        reportComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportComboBoxActionPerformed(evt);
            }
        });
        reportsTypePanel.add(reportComboBox);

        ReportsPanel.add(reportsTypePanel);

        reportsParametersLabel.setText(bundle.getString("cropsUI.reportsParametersLabel.text")); // NOI18N
        reportParametersPanel.add(reportsParametersLabel);

        jLabel7.setText(bundle.getString("cropsUI.jLabel7.text")); // NOI18N
        reportParametersPanel.add(jLabel7);

        reportParametersComboBox.setEnabled(false);
        reportParametersComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportParametersComboBoxActionPerformed(evt);
            }
        });
        reportParametersPanel.add(reportParametersComboBox);

        jLabel11.setText(bundle.getString("cropsUI.jLabel11.text")); // NOI18N
        reportParametersPanel.add(jLabel11);

        reportsParameter2ComboBox.setEnabled(false);
        reportParametersPanel.add(reportsParameter2ComboBox);

        jLabel42.setText(bundle.getString("cropsUI.jLabel42.text")); // NOI18N
        reportParametersPanel.add(jLabel42);

        jLabel41.setText(bundle.getString("cropsUI.jLabel41.text")); // NOI18N
        reportParametersPanel.add(jLabel41);

        startMonthComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        startMonthComboBox.setEnabled(false);
        reportParametersPanel.add(startMonthComboBox);

        startYearComboBox.setModel(new javax.swing.DefaultComboBoxModel(this.fillComboWithYears()));
        startYearComboBox.setEnabled(false);
        reportParametersPanel.add(startYearComboBox);

        jLabel43.setText(bundle.getString("cropsUI.jLabel43.text")); // NOI18N
        reportParametersPanel.add(jLabel43);

        endMonthComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        endMonthComboBox.setEnabled(false);
        reportParametersPanel.add(endMonthComboBox);

        endYearComboBox.setModel(new javax.swing.DefaultComboBoxModel(this.fillComboWithYears()));
        endYearComboBox.setEnabled(false);
        reportParametersPanel.add(endYearComboBox);

        ReportsPanel.add(reportParametersPanel);

        reportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Company Name", "Afm", "Date Of Issue", "Date of Payment"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        reportsResultsScrollPane.setViewportView(reportTable);

        ReportsPanel.add(reportsResultsScrollPane);

        reportButton.setText(bundle.getString("cropsUI.reportButton.text")); // NOI18N
        reportButton.setAlignmentY(0.0F);
        reportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportButtonActionPerformed(evt);
            }
        });
        reportButtonPanel.add(reportButton);

        saveReportAsCsvButton.setText(bundle.getString("cropsUI.saveReportAsCsvButton.text")); // NOI18N
        saveReportAsCsvButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveReportAsCsvButtonActionPerformed(evt);
            }
        });
        reportButtonPanel.add(saveReportAsCsvButton);

        ReportsPanel.add(reportButtonPanel);

        tabs.addTab(bundle.getString("cropsUI.ReportsPanel.TabConstraints.tabTitle"), ReportsPanel); // NOI18N

        operationsMenu.setText(bundle.getString("cropsUI.operationsMenu.text")); // NOI18N

        importMainMenu.setText(bundle.getString("cropsUI.importMainMenu.text")); // NOI18N

        jMenuItem2.setText(bundle.getString("cropsUI.jMenuItem2.text")); // NOI18N
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        importMainMenu.add(jMenuItem2);

        operationsMenu.add(importMainMenu);

        exportMainMenu.setText(bundle.getString("cropsUI.exportMainMenu.text")); // NOI18N

        exportDBMenuItem.setText(bundle.getString("cropsUI.exportDBMenuItem.text")); // NOI18N
        exportDBMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportDBMenuItemActionPerformed(evt);
            }
        });
        exportMainMenu.add(exportDBMenuItem);

        exportSurveyorDataMenuItem.setText(bundle.getString("cropsUI.exportSurveyorDataMenuItem.text")); // NOI18N
        exportSurveyorDataMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportSurveyorDataMenuItemActionPerformed(evt);
            }
        });
        exportMainMenu.add(exportSurveyorDataMenuItem);

        operationsMenu.add(exportMainMenu);

        exequteSqlMenuItem.setText(bundle.getString("cropsUI.exequteSqlMenuItem.text")); // NOI18N
        exequteSqlMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exequteSqlMenuItemActionPerformed(evt);
            }
        });
        operationsMenu.add(exequteSqlMenuItem);

        emptyDBMenuItem.setText(bundle.getString("cropsUI.emptyDBMenuItem.text")); // NOI18N
        emptyDBMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emptyDBMenuItemActionPerformed(evt);
            }
        });
        operationsMenu.add(emptyDBMenuItem);

        shutdownMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        shutdownMenuItem.setText(bundle.getString("cropsUI.shutdownMenuItem.text")); // NOI18N
        shutdownMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shutdownMenuItemActionPerformed(evt);
            }
        });
        operationsMenu.add(shutdownMenuItem);

        jMenuBar1.add(operationsMenu);

        advFeaturesMenu.setText(bundle.getString("cropsUI.advFeaturesMenu.text")); // NOI18N

        fertilizerRecipiesMenu.setText(bundle.getString("cropsUI.fertilizerRecipiesMenu.text")); // NOI18N

        nutTypesManagmentMenuItem.setText(bundle.getString("cropsUI.nutTypesManagmentMenuItem.text")); // NOI18N
        nutTypesManagmentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nutTypesManagmentMenuItemActionPerformed(evt);
            }
        });
        fertilizerRecipiesMenu.add(nutTypesManagmentMenuItem);

        fertilizerRecipiesManagmentMenuItem.setText(bundle.getString("cropsUI.fertilizerRecipiesManagmentMenuItem.text")); // NOI18N
        fertilizerRecipiesManagmentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fertilizerRecipiesManagmentMenuItemActionPerformed(evt);
            }
        });
        fertilizerRecipiesMenu.add(fertilizerRecipiesManagmentMenuItem);

        advFeaturesMenu.add(fertilizerRecipiesMenu);

        nutrientDepletionMenuItem.setText(bundle.getString("cropsUI.nutrientDepletionMenuItem.text")); // NOI18N
        nutrientDepletionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nutrientDepletionMenuItemActionPerformed(evt);
            }
        });
        advFeaturesMenu.add(nutrientDepletionMenuItem);

        jMenuItem1.setText(bundle.getString("cropsUI.jMenuItem1.text")); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        advFeaturesMenu.add(jMenuItem1);

        jMenuBar1.add(advFeaturesMenu);

        aboutMenu.setText(bundle.getString("cropsUI.aboutMenu.text")); // NOI18N

        aboutMenuItem.setText(bundle.getString("cropsUI.aboutMenuItem.text")); // NOI18N
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        aboutMenu.add(aboutMenuItem);

        jMenuBar1.add(aboutMenu);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(tabs, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1070, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(tabs, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void productionGoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productionGoButtonActionPerformed

        String cropfield = (String) prodCropFieldComboBox.getSelectedItem();
        String cropType = (String) cropTypeInFieldComboBox.getSelectedItem();
        String obs = productionObservationsTextField.getText();
        String dofh = dateOfHarvestTextField.getText();
        String quant = quantityTextField.getText();
        int a = this.inserEditProductionComboBox.getSelectedIndex();
        if (a == 0)//if selected value is insert
        {
            InsertProduction ins = new InsertProduction(cropfield, cropType, obs, dofh, quant);
            this.clearProductionTextFields();

        } else if (a == 1)//if selected value is edit
        {

            String id = prodIdTextField.getText();
            SelectFarmFieldDetails ff = new SelectFarmFieldDetails();
            ff.SelectFarmFieldDetailsWithName(cropfield);
            String fid = ff.getID();
            SelectCropTypeDetails ctd = new SelectCropTypeDetails();
            ctd.SelectCropTypeDetailsWithName(cropType);
            String cid = ctd.getID();
            SelectCropFieldDetails cfd = new SelectCropFieldDetails();
            cfd.SelectCropFieldDetailsWithFidCid(fid, cid);
            String cfid = cfd.getID();

            if (id.length() > 0 && quant.length() > 0 && dofh.length() > 0 && obs.length() > 0 && cfid.length() > 0) {
                UpdateProductionRecord u = new UpdateProductionRecord(id, quant, dofh, obs, cfid);
                this.clearProductionTextFields();
            }

        } else if (a == 2)//if selected value is delete
        {
            String bid = prodIdTextField.getText();
            if (bid.length() > 0) {
                DeleteProduction del = new DeleteProduction(bid);
                this.clearProductionTextFields();
            }

        }
    }//GEN-LAST:event_productionGoButtonActionPerformed

    private void prodIdTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prodIdTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_prodIdTextFieldActionPerformed

    private void inserEditProductionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserEditProductionComboBoxActionPerformed
        //an alaksei to status na vriskei to id kai analoga na thetei ta diafora values
        //kai na kanei ta kelia editable i mi.
        int a = this.inserEditProductionComboBox.getSelectedIndex();
        if (a == 0)//if selected value is insert
        {
            this.prodIdTextField.setEditable(false);
            this.productionRetrieveButton.setEnabled(false);

        } else if (a == 1)//if selected value is edit
        {

            this.prodIdTextField.setEditable(true);
            this.productionRetrieveButton.setEnabled(true);

        } else if (a == 2)//if selected value is delete
        {
            this.prodIdTextField.setEditable(true);
            this.productionRetrieveButton.setEnabled(true);
        }
    }//GEN-LAST:event_inserEditProductionComboBoxActionPerformed

    private void cropTypeDetailsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cropTypeDetailsComboBoxActionPerformed
        int a = this.cropTypeDetailsComboBox.getSelectedIndex();
        if (a == 0)//if selected value is insert
        {
            this.cropTypeDetailsIDTextField.setEditable(false);
            this.cropTypeRetrieveButton.setEnabled(false);

        } else if (a == 1)//if selected value is edit
        {

            this.cropTypeDetailsIDTextField.setEditable(true);
            this.cropTypeRetrieveButton.setEnabled(true);

        } else if (a == 2)//if selected value is delete
        {
            this.cropTypeDetailsIDTextField.setEditable(true);
            this.cropTypeRetrieveButton.setEnabled(true);
        }
    }//GEN-LAST:event_cropTypeDetailsComboBoxActionPerformed

    private void cropTypeDetailsGoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cropTypeDetailsGoButtonActionPerformed

        String name = cropTypeDetailsNameTextField.getText();
        String obs = cropTypeDetailsObservation.getText();
        String cid = cropTypeDetailsIDTextField.getText();
        int a = this.cropTypeDetailsComboBox.getSelectedIndex();
        if (a == 0)//if selected value is insert
        {
            InsertCropType u = new InsertCropType(name, obs);
            this.clearCropTypeTextFields();

        } else if (a == 1)//if selected value is edit
        {
            if (cid.length() > 0 && name.length() > 0 && obs.length() > 0) {
                UpdateCropTypeRecord u = new UpdateCropTypeRecord(cid, name, obs);
                this.clearCropTypeTextFields();
            }

        } else if (a == 2)//if selected value is delete
        {
            DeleteCropType d = new DeleteCropType(cid);
            this.clearCropTypeTextFields();
        }
        this.refreshCropTypeCombos();
    }//GEN-LAST:event_cropTypeDetailsGoButtonActionPerformed

    private void cropTypeRetrieveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cropTypeRetrieveButtonActionPerformed
        int a = this.cropTypeDetailsComboBox.getSelectedIndex();

        if (a == 1 || a == 2)//if selected value is edit or delete
        {
            String id = this.cropTypeDetailsIDTextField.getText();
            //System.out.println("id is "+id);
            if (id.length() > 0) {
                SelectCropTypeDetails z = new SelectCropTypeDetails();
                z.SelectCropTypeDetailsWithID(id);
                if (z.resultsExist()) {
                    this.cropTypeDetailsNameTextField.setText(z.getName());
                    this.cropTypeDetailsObservation.setText(z.getObservations());
                }
            }
        }

    }//GEN-LAST:event_cropTypeRetrieveButtonActionPerformed

    private void productionRetrieveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productionRetrieveButtonActionPerformed
        String id = prodIdTextField.getText();
        SelectProductionDetails prod = new SelectProductionDetails();
        prod.SelectProductionDetailsWithID(id);
        if (prod.resultsExist()) {
            dateOfHarvestTextField.setText(prod.getDateOfHarvest());
            quantityTextField.setText(prod.getQuantity());
            productionObservationsTextField.setText(prod.getObservations());
            SelectCropFieldDetails cfdetails = new SelectCropFieldDetails();
            cfdetails.SelectCropFieldDetailsWithID(prod.getCFID());
            String cid = cfdetails.getCID();
            String fid = cfdetails.getFID();
            SelectCropTypeDetails ctdetails = new SelectCropTypeDetails();
            ctdetails.SelectCropTypeDetailsWithID(cid);
            cropTypeInFieldComboBox.setSelectedItem(ctdetails.getName());
            SelectFarmFieldDetails fdetails = new SelectFarmFieldDetails();
            fdetails.SelectFarmFieldDetailsWithID(fid);
            prodCropFieldComboBox.setSelectedItem(fdetails.getName());
        }
    }//GEN-LAST:event_productionRetrieveButtonActionPerformed

    private void reportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportButtonActionPerformed
        this.reportActions();
    }//GEN-LAST:event_reportButtonActionPerformed

    private void shutdownMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shutdownMenuItemActionPerformed
        PopupMessageFrame mes = new PopupMessageFrame();
        mes.setNotification(java.util.ResourceBundle.getBundle("gr/oncrete/nick/myCrop/UserInterface/Bundle").getString("THE-DATABASE-ENGINE-AND-THE-APPLICATION-WILL-SHUTDOWN"));
        ShutdownDB s = new ShutdownDB();
        System.exit(0);
}//GEN-LAST:event_shutdownMenuItemActionPerformed

    private void emptyDBMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emptyDBMenuItemActionPerformed
        PopupMessageFrame mes = new PopupMessageFrame();
        mes.setNotification(java.util.ResourceBundle.getBundle("gr/oncrete/nick/myCrop/UserInterface/Bundle").getString("ALL-THE-DATABASE-CONTENT-IS-GOING-TO-BE-DELETED"));
        gr.oncrete.nick.myCrop.RDBMS.EmptyTables e = new gr.oncrete.nick.myCrop.RDBMS.EmptyTables();
        this.refreshCropTypeCombos();
    }//GEN-LAST:event_emptyDBMenuItemActionPerformed

    private void exportDBMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportDBMenuItemActionPerformed
        DumpDatabase d = new DumpDatabase();
        //dump crop type csv
        this.exportCsv("cropTypeCsv.csv", d.getCropTypeCsv());
        //dump crop fields csv
        this.exportCsv("cropFieldsCsv.csv", d.getCropFieldsCsv());
        //dump farm fields csv
        this.exportCsv("farmFieldsCsv.csv", d.getFarmFieldCsv());
        //dump production csv
        this.exportCsv("productionCsv.csv", d.getProductionCsv());
        //dump application type
        this.exportCsv("applicationTypeCsv.csv", d.getApplicationTypeCsv());
        //dump application on crop field csv
        this.exportCsv("applicationOnCropFieldCsv.csv", d.getApplicationOnCropFieldCsv());
        //dump frecipie csv
        this.exportCsv("frecipieCsv.csv", d.getFrecipiedCsv());
        //dump nutrient type csv
        this.exportCsv("nutrienttypeCsv.csv", d.getNutrientTypeCsv());


    }//GEN-LAST:event_exportDBMenuItemActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        SelectAllCropTypes s = new SelectAllCropTypes();
        SelectAllCropFieldsDetails s1 = new SelectAllCropFieldsDetails();
        SelectAllFarmFieldsDetails s2 = new SelectAllFarmFieldsDetails();
        SelectAllProductionDetails s3 = new SelectAllProductionDetails();
        SelectAllApplicationTypeDetails s4 = new SelectAllApplicationTypeDetails();
        SelectAllApplicationDetails s5 = new SelectAllApplicationDetails();
        SelectAllFertRecipyDetails s6 = new SelectAllFertRecipyDetails();
        SelectAllNutrientTypeDetails s7 = new SelectAllNutrientTypeDetails();

        if (s.isEmpty() && s1.isEmpty() && s2.isEmpty() && s3.isEmpty() && s4.isEmpty() && s5.isEmpty() && s6.isEmpty() && s7.isEmpty()) {
            ImportCropTypeTable impCrt = new ImportCropTypeTable();
            impCrt.importFileToDB();

            ImportFarmFieldTable impfrfld = new ImportFarmFieldTable();
            impfrfld.importFileToDB();

            ImportApplicationTypeTable impapt = new ImportApplicationTypeTable();
            impapt.importFileToDB();

            ImportCropFieldsTable imcpf = new ImportCropFieldsTable();
            imcpf.importFileToDB();

            ImportProductionTable impr = new ImportProductionTable();
            impr.importFileToDB();

            ImportApplicationOnCropFieldsTable ap = new ImportApplicationOnCropFieldsTable();
            ap.importFileToDB();

            ImportNutrientTypeTable nt = new ImportNutrientTypeTable();
            nt.importFileToDB();

            ImportFrecipieTable fr = new ImportFrecipieTable();
            fr.importFileToDB();

            this.refreshCropTypeCombos();
            this.refreshApplicationTypeCombos();
        } else {
            PopupMessageFrame mes = new PopupMessageFrame();
            mes.setNotification(java.util.ResourceBundle.getBundle("gr/oncrete/nick/myCrop/UserInterface/Bundle").getString("THE-DATABASE-IS-NOT-EMPTY-I-WILL-DO-NOTHING"));
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void reportComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportComboBoxActionPerformed

        int a = reportComboBox.getSelectedIndex();
        if (a == 0 || a == 1 || a == 2 || a == 3 || a == 4 || a == 5)//if report does not need year filtering
        {
            reportParametersComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{""}));
        } else if (a == 6) {//if the report is select total production of a crop
            jLabel7.setText("Select Crop");
            reportParametersComboBox.setEnabled(true);
            reportParametersComboBox.setModel(new javax.swing.DefaultComboBoxModel(this.getCropTypeCombo()));
            reportParametersComboBoxSentinel = 2;//set sentinel 1 the combobox contains crop types
            reportsParameter2ComboBox.setEnabled(false);
            this.disablePeriodCombos();

        } else if (a == 8) {//if the report is select total production of a crop for a period
            jLabel7.setText("Select Crop");
            reportParametersComboBox.setEnabled(true);
            reportParametersComboBox.setModel(new javax.swing.DefaultComboBoxModel(this.getCropTypeCombo()));
            reportParametersComboBoxSentinel = 2;//set sentinel 1 the combobox contains crop types
            reportsParameter2ComboBox.setEnabled(false);
            this.enablePeriodCombos();

        } else if (a == 7 || a == 9) {//if the report is select applications on a specific field and specific crop
            jLabel7.setText("Select Field");
            reportParametersComboBox.setEnabled(true);
            reportParametersComboBox.setModel(new javax.swing.DefaultComboBoxModel(this.getFieldsCombo()));
            reportParametersComboBoxSentinel = 1;//set sentinel 1 the combobox contains fields
            this.disablePeriodCombos();

        } else if (a == 10) {//if the report is select applications on a specific field and specific crop in a period
            jLabel7.setText("Select Field");
            reportParametersComboBox.setEnabled(true);
            reportParametersComboBox.setModel(new javax.swing.DefaultComboBoxModel(this.getFieldsCombo()));
            reportParametersComboBoxSentinel = 1;//set sentinel 1 the combobox contains fields
            this.enablePeriodCombos();

        } else if (a == 18)//if report needs year filtering
        {
            reportParametersComboBox.setModel(new javax.swing.DefaultComboBoxModel(this.fillComboWithYears()));
        }



    }//GEN-LAST:event_reportComboBoxActionPerformed

    private void cropFieldActionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cropFieldActionComboBoxActionPerformed
        //an alaksei to status na vriskei to id kai analoga na thetei ta diafora values
        //kai na kanei ta kelia editable i mi.
        int a = this.cropFieldActionComboBox.getSelectedIndex();
        if (a == 0)//if selected value is insert
        {
            this.cropFieldIDTextField.setEditable(false);

            this.cropFieldRetrieveButton.setEnabled(false);

        } else if (a == 1)//if selected value is edit
        {

            this.cropFieldIDTextField.setEditable(true);
            this.cropFieldRetrieveButton.setEnabled(true);

        } else if (a == 2)//if selected value is delete
        {
            this.cropFieldIDTextField.setEditable(true);
            this.cropFieldRetrieveButton.setEnabled(true);
        }

    }//GEN-LAST:event_cropFieldActionComboBoxActionPerformed

    private void cropFieldGoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cropFieldGoButtonActionPerformed

        String cropType = (String) cropTypeComboBox.getSelectedItem();
        String fieldName = (String) fieldComboBox.getSelectedItem();
        String cropDetails = cropFieldTextArea.getText();
        int a = this.cropFieldActionComboBox.getSelectedIndex();
        if (a == 0)//if selected value is insert
        {

            InsertCropField ins = new InsertCropField(cropType, fieldName, cropDetails);
            this.clearCropFieldTextFields();
        } else if (a == 1)//if selected value is edit
        {
            String cfid = cropFieldIDTextField.getText();
            if (cropType.length() > 0 && fieldName.length() > 0 && cropDetails.length() > 0 && cfid.length() > 0) {
                UpdateCropFieldRecord u = new UpdateCropFieldRecord(cfid, fieldName, cropType, cropDetails);
                this.clearCropFieldTextFields();
            }
        } else if (a == 2)//if selected value is delete
        {
            String inid = cropFieldIDTextField.getText();
            if (inid.length() > 0) {
                DeleteCropField del = new DeleteCropField(inid);
                this.clearCropFieldTextFields();
            }



        }
    }//GEN-LAST:event_cropFieldGoButtonActionPerformed

    private void cropFieldRetrieveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cropFieldRetrieveButtonActionPerformed
        String inid = cropFieldIDTextField.getText();
        SelectCropFieldDetails cfd = new SelectCropFieldDetails();
        cfd.SelectCropFieldDetailsWithID(inid);
        if (cfd.resultsExist()) {
            cropFieldTextArea.setText(cfd.getCropDetails());
            SelectCropTypeDetails ctd = new SelectCropTypeDetails();
            ctd.SelectCropTypeDetailsWithID(cfd.getCID());
            cropTypeComboBox.setSelectedItem(ctd.getName());
            SelectFarmFieldDetails sfd = new SelectFarmFieldDetails();
            sfd.SelectFarmFieldDetailsWithID(cfd.getFID());
            fieldComboBox.setSelectedItem(sfd.getName());

        }
    }//GEN-LAST:event_cropFieldRetrieveButtonActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        AboutWindow a = new AboutWindow();
        a.setAbout();
        a.runAbout();
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void fieldActionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldActionComboBoxActionPerformed
        int a = fieldActionComboBox.getSelectedIndex();
        if (a == 0) {
            farmfieldIDTextField.setEditable(false);
            farmFieldRetrieveButton.setEnabled(false);
        } else {
            farmfieldIDTextField.setEditable(true);
            farmFieldRetrieveButton.setEnabled(true);
        }
    }//GEN-LAST:event_fieldActionComboBoxActionPerformed

    private void farmfieldGoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_farmfieldGoButtonActionPerformed

        String fid = farmfieldIDTextField.getText();
        String fName = farmFieldNameTextField.getText();
        String area = farmFieldSizeTextField.getText();
        String nb = farmfieldNBorderTextField.getText();
        String eb = farmfieldEBorderTextField.getText();
        String sb = farmfieldSBorderTextField.getText();
        String wb = farmfieldWBorderTextField.getText();
        String ob = farmfieldObsTextField.getText();
        int a = fieldActionComboBox.getSelectedIndex();

        if (a == 0)//if we have selected insert farm field
        {

            InsertFarmField ins = new InsertFarmField(fName, area, nb, eb, sb, wb, ob);
            this.clearFarmFields();
            this.refreshCropTypeCombos();
        } else if (a == 1)//if we have selected edit
        {
            UpdateFarmFieldRecord u = new UpdateFarmFieldRecord(fid, fName, area, nb, eb, sb, wb, ob);
            this.clearFarmFields();
            this.refreshCropTypeCombos();
        } else if (a == 2)//if we have selected delete
        {

            if (fid.length() > 0) {
                DeleteFarmField d = new DeleteFarmField(fid);
                this.clearFarmFields();
            }
            this.refreshCropTypeCombos();
        }

    }//GEN-LAST:event_farmfieldGoButtonActionPerformed

    private void farmFieldNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_farmFieldNameTextFieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_farmFieldNameTextFieldActionPerformed

    private void farmFieldRetrieveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_farmFieldRetrieveButtonActionPerformed
        int a = fieldActionComboBox.getSelectedIndex();
        if (a == 1 || a == 2)//if action selected is edit or delete
        {
            String fid = farmfieldIDTextField.getText();
            SelectFarmFieldDetails sel = new SelectFarmFieldDetails();
            sel.SelectFarmFieldDetailsWithID(fid);
            farmFieldNameTextField.setText(sel.getName());
            farmFieldSizeTextField.setText(sel.getArea());
            farmfieldNBorderTextField.setText(sel.getNBorder());
            farmfieldEBorderTextField.setText(sel.getEBorder());
            farmfieldSBorderTextField.setText(sel.getSBorder());
            farmfieldWBorderTextField.setText(sel.getWBorder());
            farmfieldObsTextField.setText(sel.getObservations());

        }
    }//GEN-LAST:event_farmFieldRetrieveButtonActionPerformed

    private void cropFieldIDTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cropFieldIDTextFieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_cropFieldIDTextFieldActionPerformed

    private void prodCropFieldComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prodCropFieldComboBoxActionPerformed
        String a = (String) prodCropFieldComboBox.getSelectedItem();
        SelectFarmFieldDetails field = new SelectFarmFieldDetails();
        field.SelectFarmFieldDetailsWithName(a);
        cropTypeInFieldComboBox.setModel(new javax.swing.DefaultComboBoxModel(this.getCropsInAFieldCombo(field.getID())));
    }//GEN-LAST:event_prodCropFieldComboBoxActionPerformed

    private void exequteSqlMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exequteSqlMenuItemActionPerformed
        ExecuteSqlWindow e = new ExecuteSqlWindow();
        e.runExecuteSqlCommand();
    }//GEN-LAST:event_exequteSqlMenuItemActionPerformed

    private void insertEditApplicationTypeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertEditApplicationTypeComboActionPerformed
        int a = insertEditApplicationTypeCombo.getSelectedIndex();
        if (a == 0) {
            appTypeRetrieveButton.setEnabled(false);
            appTypeIDTextField.setEnabled(false);
            appTypeIDTextField.setEditable(false);
        } else if (a == 1 || a == 2) {
            appTypeRetrieveButton.setEnabled(true);
            appTypeIDTextField.setEnabled(true);
            appTypeIDTextField.setEditable(true);
        }
    }//GEN-LAST:event_insertEditApplicationTypeComboActionPerformed

    private void appTypeGoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appTypeGoButtonActionPerformed
        int a = insertEditApplicationTypeCombo.getSelectedIndex();
        String appTName = appTypeNameTextField.getText();
        String appTypeID = appTypeIDTextField.getText();
        String appTObs = appObsTextField.getText();
        if (a == 0)//if selected action is insert value
        {
            InsertApplicationType insAp = new InsertApplicationType(appTName, appTObs);
            this.clearApplicationTypeTextFields();
            this.refreshApplicationTypeCombos();
        } else if (a == 1) //if selected action is edit
        {
            if (appTypeID.length() > 0 && appTName.length() > 0) {
                UpdateApplicationTypeRecord u = new UpdateApplicationTypeRecord(appTypeID, appTName, appTObs);
                this.clearApplicationTypeTextFields();
                this.refreshApplicationTypeCombos();
            }
        } else if (a == 2) //if selected action is delete
        {
            DeleteApplicationType d = new DeleteApplicationType(appTypeID);
            this.clearApplicationTypeTextFields();
            this.refreshApplicationTypeCombos();
        }
    }//GEN-LAST:event_appTypeGoButtonActionPerformed

    private void appTypeRetrieveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appTypeRetrieveButtonActionPerformed
        String apID = appTypeIDTextField.getText();
        if (apID.length() > 0) {
            SelectApplicationTypeDetails appTypeDet = new SelectApplicationTypeDetails();
            appTypeDet.SelectApplicationTypeDetailsWithID(apID);
            appTypeNameTextField.setText(appTypeDet.getApplication());
            appObsTextField.setText(appTypeDet.getObservations());
        }
    }//GEN-LAST:event_appTypeRetrieveButtonActionPerformed

    private void appQuantityTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appQuantityTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_appQuantityTextFieldActionPerformed

    private void appFieldNameComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appFieldNameComboBoxActionPerformed
        String a = (String) appFieldNameComboBox.getSelectedItem();
        SelectFarmFieldDetails field = new SelectFarmFieldDetails();
        field.SelectFarmFieldDetailsWithName(a);
        appCropTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(this.getCropsInAFieldCombo(field.getID())));
    }//GEN-LAST:event_appFieldNameComboBoxActionPerformed

    private void applicationActionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applicationActionComboBoxActionPerformed
        int a = applicationActionComboBox.getSelectedIndex();
        if (a == 0) {
            appIDTextField.setEditable(false);
            applicationRetrieveButton.setEnabled(false);
        } else if (a == 1 || a == 2) {
            appIDTextField.setEditable(true);
            applicationRetrieveButton.setEnabled(true);
        }
    }//GEN-LAST:event_applicationActionComboBoxActionPerformed

    private void insertEditApplicationGoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertEditApplicationGoButtonActionPerformed
        String fName = (String) appFieldNameComboBox.getSelectedItem();
        String cType = (String) appCropTypeComboBox.getSelectedItem();
        String appType = (String) appTypeComboBox.getSelectedItem();
        String quantity = appQuantityTextField.getText();
        String expenses = appExpensesTextField.getText();
        String doa = appDateOfApplicationTextField.getText();
        String obs = appObservationsTextArea.getText();
        String aocfid = appIDTextField.getText();

        int a = applicationActionComboBox.getSelectedIndex();
        if (a == 0) //if action is insert
        {
            InsertApplication ins = new InsertApplication(fName, cType, appType, quantity, expenses, obs, doa);
            this.clearApplicationTextFields();

        } else if (a == 1)//if action is edit
        {
            SelectApplicationTypeDetails aptd = new SelectApplicationTypeDetails();
            aptd.SelectApplicationTypeDetailsWithName(appType);
            SelectCropTypeDetails crtd = new SelectCropTypeDetails();
            crtd.SelectCropTypeDetailsWithName(cType);
            SelectFarmFieldDetails ff = new SelectFarmFieldDetails();
            ff.SelectFarmFieldDetailsWithName(fName);
            SelectCropFieldDetails cfd = new SelectCropFieldDetails();
            cfd.SelectCropFieldDetailsWithFidCid(ff.getID(), crtd.getID());

            UpdateApplicationRecord e = new UpdateApplicationRecord(aocfid, quantity, doa, expenses, obs, cfd.getID(), aptd.getID());
            this.clearApplicationTextFields();
        } else if (a == 2)//if action is delete
        {
            DeleteApplication d = new DeleteApplication(aocfid);
            this.clearApplicationTextFields();
        }
    }//GEN-LAST:event_insertEditApplicationGoButtonActionPerformed

    private void applicationRetrieveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applicationRetrieveButtonActionPerformed
        String aocfid = appIDTextField.getText();
        SelectApplicationDetails a = new SelectApplicationDetails();
        a.SelectApplicationDetailsWithID(aocfid);
        appQuantityTextField.setText(a.getQuantity());
        appExpensesTextField.setText(a.getExpenses());
        appDateOfApplicationTextField.setText(a.getDateOfApplication());
        appObservationsTextArea.setText(a.getObservations());
        SelectApplicationTypeDetails aptd = new SelectApplicationTypeDetails();
        aptd.SelectApplicationTypeDetailsWithID(a.getAPID());
        appFieldNameComboBox.setSelectedItem((String) aptd.getApplication());
        SelectCropFieldDetails cfd = new SelectCropFieldDetails();
        cfd.SelectCropFieldDetailsWithID(a.getCFID());
        String fid = cfd.getFID();
        String cid = cfd.getCID();
        SelectCropTypeDetails ct = new SelectCropTypeDetails();
        ct.SelectCropTypeDetailsWithID(cid);
        appCropTypeComboBox.setSelectedItem((String) ct.getName());
        SelectFarmFieldDetails ffd = new SelectFarmFieldDetails();
        ffd.SelectFarmFieldDetailsWithID(fid);
        appFieldNameComboBox.setSelectedItem((String) ffd.getName());
    }//GEN-LAST:event_applicationRetrieveButtonActionPerformed

    private void saveReportAsCsvButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveReportAsCsvButtonActionPerformed
        String outStr = "";
        outStr = outStr + "Date:" + this.getDateTime() + "\n\n";
        if (currentReport != null) {
            Iterator i = currentReport.iterator();
            while (i.hasNext()) {
                String row = "";
                String[] arrRow = (String[]) i.next();
                int arrayLength = arrRow.length;
                for (int o = 0; o < arrayLength; o++) {
                    if (o == arrayLength - 1) {
                        row = row + arrRow[o] + ";\n";
                    } else {
                        row = row + arrRow[o] + ";";
                    }
                }
                outStr = outStr + row;
            }
            JFileChooser fc = new JFileChooser(System.getProperty("user.home"));
            int option = fc.showSaveDialog(null);
            if (option == JFileChooser.APPROVE_OPTION) {
                if (fc.getSelectedFile() != null) {
                    String curDir = fc.getCurrentDirectory().getAbsolutePath();
                    String theFileToSave = fc.getName(fc.getSelectedFile());
                    //this.writeFile(curDir + System.getProperty("file.separator") + theFileToSave, outStr);
                    this.writeFileNewThread(curDir + System.getProperty("file.separator") + theFileToSave, outStr);
                }
            }
        }
        // System.out.println(outStr);
    }//GEN-LAST:event_saveReportAsCsvButtonActionPerformed

    private void reportParametersComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportParametersComboBoxActionPerformed
        if (reportParametersComboBoxSentinel == 1) {//if the reports parameter combo contain fields look for the crops for each field
            //reportsParameter2ComboBox
            String a = (String) reportParametersComboBox.getSelectedItem();
            SelectFarmFieldDetails field = new SelectFarmFieldDetails();
            field.SelectFarmFieldDetailsWithName(a);
            reportsParameter2ComboBox.setEnabled(true);
            reportsParameter2ComboBox.setModel(new javax.swing.DefaultComboBoxModel(this.getCropsInAFieldCombo(field.getID())));
        }
    }//GEN-LAST:event_reportParametersComboBoxActionPerformed

    private void nutTypesManagmentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nutTypesManagmentMenuItemActionPerformed
        NutrientTypesWindow n = new NutrientTypesWindow();
        n.displayWindow();
    }//GEN-LAST:event_nutTypesManagmentMenuItemActionPerformed

    private void fertilizerRecipiesManagmentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fertilizerRecipiesManagmentMenuItemActionPerformed
        RecipiesWindow fr = new RecipiesWindow();
        fr.displayWindow();
    }//GEN-LAST:event_fertilizerRecipiesManagmentMenuItemActionPerformed

    private void nutrientDepletionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nutrientDepletionMenuItemActionPerformed
        NutrientDelpetionEstimateWindow ntd = new NutrientDelpetionEstimateWindow();
        ntd.displayWindow();
    }//GEN-LAST:event_nutrientDepletionMenuItemActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        EtWindow et = new EtWindow();
        et.displayWindow();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void exportSurveyorDataMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportSurveyorDataMenuItemActionPerformed
        DumpDatabase d = new DumpDatabase();
        this.exportCsv("surveyorDATACsv.csv", d.getSurveyorDataCsv());
    }//GEN-LAST:event_exportSurveyorDataMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new cropsUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel InsertEditApplication;
    private javax.swing.JPanel InsertEditApplicationType;
    private javax.swing.JPanel InsertEditCropForAField;
    private javax.swing.JPanel InsertEditCropTypePanel;
    private javax.swing.JPanel InsertEditFieldPanel;
    private javax.swing.JPanel InsertEditProduction;
    private javax.swing.JPanel ReportsPanel;
    private javax.swing.JMenu aboutMenu;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenu advFeaturesMenu;
    private javax.swing.JComboBox appCropTypeComboBox;
    private javax.swing.JTextField appDateOfApplicationTextField;
    private javax.swing.JTextField appExpensesTextField;
    private javax.swing.JComboBox appFieldNameComboBox;
    private javax.swing.JTextField appIDTextField;
    private javax.swing.JTextField appObsTextField;
    private javax.swing.JTextArea appObservationsTextArea;
    private javax.swing.JTextField appQuantityTextField;
    private javax.swing.JComboBox appTypeComboBox;
    private javax.swing.JButton appTypeGoButton;
    private javax.swing.JTextField appTypeIDTextField;
    private javax.swing.JTextField appTypeNameTextField;
    private javax.swing.JButton appTypeRetrieveButton;
    private javax.swing.JComboBox applicationActionComboBox;
    private javax.swing.JButton applicationRetrieveButton;
    private javax.swing.JComboBox cropFieldActionComboBox;
    private javax.swing.JButton cropFieldGoButton;
    private javax.swing.JTextField cropFieldIDTextField;
    private javax.swing.JButton cropFieldRetrieveButton;
    private javax.swing.JTextArea cropFieldTextArea;
    private javax.swing.JComboBox cropTypeComboBox;
    private javax.swing.JComboBox cropTypeDetailsComboBox;
    private javax.swing.JButton cropTypeDetailsGoButton;
    private javax.swing.JTextField cropTypeDetailsIDTextField;
    private javax.swing.JTextField cropTypeDetailsNameTextField;
    private javax.swing.JTextArea cropTypeDetailsObservation;
    private javax.swing.JComboBox cropTypeInFieldComboBox;
    private javax.swing.JButton cropTypeRetrieveButton;
    private javax.swing.JTextField dateOfHarvestTextField;
    private javax.swing.JMenuItem emptyDBMenuItem;
    private javax.swing.JComboBox endMonthComboBox;
    private javax.swing.JComboBox endYearComboBox;
    private javax.swing.JMenuItem exequteSqlMenuItem;
    private javax.swing.JMenuItem exportDBMenuItem;
    private javax.swing.JMenu exportMainMenu;
    private javax.swing.JMenuItem exportSurveyorDataMenuItem;
    private javax.swing.JTextField farmFieldNameTextField;
    private javax.swing.JButton farmFieldRetrieveButton;
    private javax.swing.JTextField farmFieldSizeTextField;
    private javax.swing.JTextField farmfieldEBorderTextField;
    private javax.swing.JButton farmfieldGoButton;
    private javax.swing.JTextField farmfieldIDTextField;
    private javax.swing.JTextField farmfieldNBorderTextField;
    private javax.swing.JTextPane farmfieldObsTextField;
    private javax.swing.JTextField farmfieldSBorderTextField;
    private javax.swing.JTextField farmfieldWBorderTextField;
    private javax.swing.JMenuItem fertilizerRecipiesManagmentMenuItem;
    private javax.swing.JMenu fertilizerRecipiesMenu;
    private javax.swing.JComboBox fieldActionComboBox;
    private javax.swing.JComboBox fieldComboBox;
    private javax.swing.JMenu importMainMenu;
    private javax.swing.JComboBox inserEditProductionComboBox;
    private javax.swing.JButton insertEditApplicationGoButton;
    private javax.swing.JComboBox insertEditApplicationTypeCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JMenuItem nutTypesManagmentMenuItem;
    private javax.swing.JMenuItem nutrientDepletionMenuItem;
    private javax.swing.JMenu operationsMenu;
    private javax.swing.JComboBox prodCropFieldComboBox;
    private javax.swing.JTextField prodIdTextField;
    private javax.swing.JButton productionGoButton;
    private javax.swing.JTextField productionObservationsTextField;
    private javax.swing.JButton productionRetrieveButton;
    private javax.swing.JTextField quantityTextField;
    private javax.swing.JButton reportButton;
    private javax.swing.JPanel reportButtonPanel;
    private javax.swing.JComboBox reportComboBox;
    private javax.swing.JComboBox reportParametersComboBox;
    private javax.swing.JPanel reportParametersPanel;
    private javax.swing.JTable reportTable;
    private javax.swing.JLabel reportsLabel;
    private javax.swing.JComboBox reportsParameter2ComboBox;
    private javax.swing.JLabel reportsParametersLabel;
    private javax.swing.JScrollPane reportsResultsScrollPane;
    private javax.swing.JPanel reportsTypePanel;
    private javax.swing.JButton saveReportAsCsvButton;
    private javax.swing.JMenuItem shutdownMenuItem;
    private javax.swing.JComboBox startMonthComboBox;
    private javax.swing.JComboBox startYearComboBox;
    private javax.swing.JTabbedPane tabs;
    // End of variables declaration//GEN-END:variables

    private String[] getCropTypeCombo() {
        CropType cr = new CropType();
        return cr.names();
    }

    private String[] getApplicationTypeCombo() {
        ApplicationType ap = new ApplicationType();
        return ap.names();
    }

    private String[] getFieldsCombo() {
        FarmFields fl = new FarmFields();
        return fl.names();
    }

    private String[] getCropsInAFieldCombo(String id) {
        CropFieldsWithID fl = new CropFieldsWithID(id);
        return fl.names();
    }

    private void clearProductionTextFields() {
        productionObservationsTextField.setText("");
        prodIdTextField.setText("");
        dateOfHarvestTextField.setText("");
        quantityTextField.setText("");
    }

    private void clearApplicationTextFields() {
        appQuantityTextField.setText("");
        appExpensesTextField.setText("");
        appDateOfApplicationTextField.setText("");
        appObservationsTextArea.setText("");
        appIDTextField.setText("");
        appTypeNameTextField.setText("");
    }

    private void clearCropFieldTextFields() {

        cropFieldIDTextField.setText("");
        cropFieldTextArea.setText("");
    }

    private void clearApplicationTypeTextFields() {

        appTypeIDTextField.setText("");
        appTypeNameTextField.setText("");
        appObsTextField.setText("");
    }

    private void clearCropTypeTextFields() {
        cropTypeDetailsNameTextField.setText("");
        cropTypeDetailsIDTextField.setText("");
        cropTypeDetailsObservation.setText("");
        //refresh the combobox
        this.refreshCropTypeCombos();

    }

    /**
     * this method refreshes the companies combo box in bills tab
     *
     */
    private void refreshCropTypeCombos() {
        cropTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(this.getCropTypeCombo()));
        fieldComboBox.setModel(new javax.swing.DefaultComboBoxModel(this.getFieldsCombo()));
        prodCropFieldComboBox.setModel(new javax.swing.DefaultComboBoxModel(this.getFieldsCombo()));
    }

    private void refreshApplicationTypeCombos() {
        appTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(this.getApplicationTypeCombo()));
    }

    /**
     * e private method that creates the reports
     *
     */
    private void reportActions() {
        int a = reportComboBox.getSelectedIndex();
        if (a == 0)//if selected action is present crop type
        {
            this.reportPresentCropType();
        } else if (a == 1)//if selected action is present production
        {
            this.reportPresentProduction();
        } else if (a == 2)//if the option is report crop fields
        {
            this.reportCropFields();
        } else if (a == 3) {
            this.reportFarmFields();
        } else if (a == 4) {
            this.reportApplicationType();
        } else if (a == 5) {
            this.reportPresentApplications();
        } else if (a == 6) {//total production of crops
            this.reportTotalProductionOfCrop();
        } else if (a == 7) {//report applications in a specific field and crop
            this.reportPresentApplicationsOnSpecificFieldandSpecificCrop();
        } else if (a == 8) {//report production of a crop in the specified period
            this.reportTotalProductionOfCropInAPeriod();
        } else if (a == 9) {//report production of a specific field and crop
            this.reportProductionOfCropOnSpecificField();
        } else if (a == 10) {//applications on a crop for a period
            this.reportPresentApplicationsOnSpecificFieldandSpecificCropForAPeriod();
        }
    }

    /**
     *
     * this method will be used to create the plots in a new tab
     *
     * @param p
     */
    private void plotData(PlotDataObject p) {

        double[] xAx = p.getXdataD();
        double[] yAx = p.getYdata();
        String xLabel = p.getXtitle();
        String yLabel = p.getYtitle();
        String plotLabel = p.getPlottitle();

        Plot2D aPlot = new SimplePlotXY(xAx, yAx, plotLabel, xLabel, yLabel,
                null, null, new CircleSymbol());
        //	Make the horizontal axis a log axis.
        PlotAxis xAxis = aPlot.getHorizontalAxis();
        xAxis.setScale(new LinearAxisScale());
        aPlot.getRuns().setLineColor(Color.blue);
        this.removeOldPlotPanel();
        plPanel = new PlotPanel(aPlot);
        plPanel.setBackground(Color.white);
        tabs.addTab(plotLabel, plPanel);
    }

    /**
     * this method is used to present the crop type entries of the datbase
     * 
     * 
     */
    private void reportPresentCropType() {
        //TODO: change this with a faster algorithm, like the bill report
        SelectAllCropTypes cropTIDS = new SelectAllCropTypes();
        java.util.ArrayList cIdList = cropTIDS.getIds();
        Object[][] d = new Object[cIdList.size()][3];
        Iterator it = cIdList.iterator();

        int o = 0;
        while (it.hasNext()) {
            SelectCropTypeDetails cd = new SelectCropTypeDetails();
            cd.SelectCropTypeDetailsWithID((String) it.next());
            String[] dataStr = {cd.getID(), cd.getName(), cd.getObservations()};
            d[o] = dataStr;
            o++;
        }

        final Object d1[][] = d;
        if (cIdList.size() > 0) {
            class MyTableModel extends javax.swing.table.AbstractTableModel {

                private String[] columnNames = {"Crop Type ID", "Crop Name", "Observations"};
                private Object[][] data = d1;

                public int getColumnCount() {
                    return columnNames.length;
                }

                public int getRowCount() {
                    return data.length;
                }

                public String getColumnName(int col) {
                    return columnNames[col];
                }

                public Object getValueAt(int row, int col) {
                    return data[row][col];
                }

                public Class getColumnClass(int c) {
                    return getValueAt(0, c).getClass();
                }
            }

            reportTable.setModel(new MyTableModel());
            reportTable.setAutoCreateRowSorter(true);//add a primitive sort by column function
        }

    }

    /**
     * this method is used to present the application  type entries of the datbase
     *
     *
     */
    private void reportApplicationType() {
        //TODO: change this with a faster algorithm, like the bill report
        SelectAllApplicationTypeDetails apTIDS = new SelectAllApplicationTypeDetails();
        java.util.ArrayList apIdList = apTIDS.getAllRows();
        Object[][] d = new Object[apIdList.size()][3];
        Iterator it = apIdList.iterator();
        String[] columnNames = {"Application Type ID", "Application Name", "Observations"};
        currentReport = new ArrayList(apIdList.size() + 2);//for the save as txt functio
        currentReport.add(columnNames);
        int o = 0;
        while (it.hasNext()) {
            String[] a = (String[]) it.next();
            d[o] = a;
            currentReport.add(a);//fill the rest of the list with the lines of the report
            o++;
        }



        if (apIdList.size() > 0) {
            reportTable.setModel(new MyTableModel(d, columnNames));
            reportTable.setAutoCreateRowSorter(true);//add a primitive sort by column function
        }

    }

    /**
     * this method is used to present the production entries of the datbase
     *
     *
     */
    private void reportPresentProduction() {
        Config cfg= new Config();
        String prodID= cfg.getProdID();
        SelectAllProductionDetails prodDet = new SelectAllProductionDetails();
        java.util.ArrayList bIdList = prodDet.getAllRows();
        Object[][] d = new Object[bIdList.size()][6];
        Iterator it = bIdList.iterator();
        String[] columnNames = {"Prod ID", "Field Name", "Crop Type", "Date of Harvest", "Quantity", "Observations"};
        currentReport = new ArrayList(bIdList.size() + 2);//for the save as txt functio
        currentReport.add(columnNames);
        int o = 0;
        while (it.hasNext()) {
            String[] a = (String[]) it.next();
            a[0]=prodID+"-"+a[0];
            d[o] = a;
            currentReport.add(a);//fill the rest of the list with the lines of the report
            o++;
        }


        if (bIdList.size() > 0) {
            reportTable.setModel(new MyTableModel(d, columnNames));
            reportTable.setAutoCreateRowSorter(true);//add a primitive sort by column function
        }
    }

    /**
     * this method is used to present the total production of a specific crop
     *
     *
     */
    private void reportTotalProductionOfCrop() {

        String cropType = (String) reportParametersComboBox.getSelectedItem();

        SelectAllProductionDetailsForASpecificCrop prodDet = new SelectAllProductionDetailsForASpecificCrop(cropType);
        java.util.ArrayList bIdList = prodDet.getAllRows();
        Object[][] d = new Object[bIdList.size()][6];
        Iterator it = bIdList.iterator();
        String[] columnNames = {"Prod ID", "Field Name", "Crop Type", "Date of Harvest", "Quantity", "Observations"};
        currentReport = new ArrayList(bIdList.size() + 2);//for the save as txt functio
        currentReport.add(columnNames);
        int o = 0;
        while (it.hasNext()) {
            String[] a = (String[]) it.next();
            d[o] = a;
            currentReport.add(a);//fill the rest of the list with the lines of the report
            o++;
        }


        if (bIdList.size() > 0) {
            reportTable.setModel(new MyTableModel(d, columnNames));
            reportTable.setAutoCreateRowSorter(true);//add a primitive sort by column function
        }
    }

    /**
     * this method is used to present the total production of a specific crop
     * in a specified period
     *
     *
     */
    private void reportTotalProductionOfCropInAPeriod() {

        String cropType = (String) reportParametersComboBox.getSelectedItem();

        SelectAllProductionDetailsForASpecificCropInPeriod prodDet = new SelectAllProductionDetailsForASpecificCropInPeriod(cropType, this.validatePeriodString(8));
        java.util.ArrayList bIdList = prodDet.getAllRows();
        Object[][] d = new Object[bIdList.size()][6];
        Iterator it = bIdList.iterator();
        String[] columnNames = {"Prod ID", "Field Name", "Crop Type", "Date of Harvest", "Quantity", "Observations"};
        currentReport = new ArrayList(bIdList.size() + 2);//for the save as txt functio
        currentReport.add(columnNames);
        int o = 0;
        while (it.hasNext()) {
            String[] a = (String[]) it.next();
            d[o] = a;
            currentReport.add(a);//fill the rest of the list with the lines of the report
            o++;
        }


        if (bIdList.size() > 0) {
            reportTable.setModel(new MyTableModel(d, columnNames));
            reportTable.setAutoCreateRowSorter(true);//add a primitive sort by column function
        }
    }

    /**
     * this method is used to present the  production of a specific crop on a field
     *
     *
     */
    private void reportProductionOfCropOnSpecificField() {
        String fieldname = (String) reportParametersComboBox.getSelectedItem();
        String croptype = (String) reportsParameter2ComboBox.getSelectedItem();


        SelectProductionDetailsForASpecificCropAndField prodDet = new SelectProductionDetailsForASpecificCropAndField(croptype, fieldname);
        java.util.ArrayList bIdList = prodDet.getAllRows();
        Object[][] d = new Object[bIdList.size()][6];
        Iterator it = bIdList.iterator();
        String[] columnNames = {"Prod ID", "Field Name", "Crop Type", "Date of Harvest", "Quantity", "Observations"};
        currentReport = new ArrayList(bIdList.size() + 2);//for the save as txt functio
        currentReport.add(columnNames);
        int o = 0;
        while (it.hasNext()) {
            String[] a = (String[]) it.next();
            d[o] = a;
            currentReport.add(a);//fill the rest of the list with the lines of the report
            o++;
        }


        if (bIdList.size() > 0) {
            reportTable.setModel(new MyTableModel(d, columnNames));
            reportTable.setAutoCreateRowSorter(true);//add a primitive sort by column function
        }
    }

    /**
     * this method is used to present the application on farm fields entries of the datbase
     *
     *
     */
    private void reportPresentApplications() {
        SelectAllApplicationDetails appDet = new SelectAllApplicationDetails();
        java.util.ArrayList aIdList = appDet.getAllRows();
        Object[][] d = new Object[aIdList.size()][8];
        Iterator it = aIdList.iterator();
        String[] columnNames = {"Application ID", "Field Name", "Crop Type", "Application Type", "Quantity", "Date of Application", "Expenses", "Observations"};
        currentReport = new ArrayList(aIdList.size() + 2);//for the save as txt functio
        currentReport.add(columnNames);
        int o = 0;
        while (it.hasNext()) {
            String[] a = (String[]) it.next();
            d[o] = a;
            currentReport.add(a);//fill the rest of the list with the lines of the report
            o++;
        }


        if (aIdList.size() > 0) {
            reportTable.setModel(new MyTableModel(d, columnNames));
            reportTable.setAutoCreateRowSorter(true);//add a primitive sort by column function
        }
    }

    /**
     * this method is used to present the application on a farm field for a specific crop
     *
     *
     */
    private void reportPresentApplicationsOnSpecificFieldandSpecificCrop() {
        String fieldname = (String) reportParametersComboBox.getSelectedItem();
        String croptype = (String) reportsParameter2ComboBox.getSelectedItem();
        SelectAllApplicationDetailsForSpecificFieldAndCrop appDet = new SelectAllApplicationDetailsForSpecificFieldAndCrop(fieldname, croptype);
        java.util.ArrayList aIdList = appDet.getAllRows();
        Object[][] d = new Object[aIdList.size()][8];
        Iterator it = aIdList.iterator();
        String[] columnNames = {"Application ID", "Field Name", "Crop Type", "Application Type", "Quantity", "Date of Application", "Expenses", "Observations"};
        currentReport = new ArrayList(aIdList.size() + 2);//for the save as txt functio
        currentReport.add(columnNames);
        int o = 0;
        while (it.hasNext()) {
            String[] a = (String[]) it.next();
            d[o] = a;
            currentReport.add(a);//fill the rest of the list with the lines of the report
            o++;
        }


        if (aIdList.size() > 0) {
            reportTable.setModel(new MyTableModel(d, columnNames));
            reportTable.setAutoCreateRowSorter(true);//add a primitive sort by column function
        }
    }

    /**
     * this method is used to present the application on a farm field for a specific crop
     *in a specific period
     *
     */
    private void reportPresentApplicationsOnSpecificFieldandSpecificCropForAPeriod() {
        String fieldname = (String) reportParametersComboBox.getSelectedItem();
        String croptype = (String) reportsParameter2ComboBox.getSelectedItem();
        SelectAllApplicationDetailsForSpecificFieldAndCrop appDet = new SelectAllApplicationDetailsForSpecificFieldAndCrop(fieldname, croptype, this.validatePeriodString(10));
        java.util.ArrayList aIdList = appDet.getAllRows();
        Object[][] d = new Object[aIdList.size()][8];
        Iterator it = aIdList.iterator();
        String[] columnNames = {"Application ID", "Field Name", "Crop Type", "Application Type", "Quantity", "Date of Application", "Expenses", "Observations"};
        currentReport = new ArrayList(aIdList.size() + 2);//for the save as txt functio
        currentReport.add(columnNames);
        int o = 0;
        while (it.hasNext()) {
            String[] a = (String[]) it.next();
            d[o] = a;
            currentReport.add(a);//fill the rest of the list with the lines of the report
            o++;
        }


        if (aIdList.size() > 0) {
            reportTable.setModel(new MyTableModel(d, columnNames));
            reportTable.setAutoCreateRowSorter(true);//add a primitive sort by column function
        }
    }

    private void reportFarmFields() {
        SelectAllFarmFieldsDetails farmflDet = new SelectAllFarmFieldsDetails();
        java.util.ArrayList flList = farmflDet.getAllRows();
        Object[][] d = new Object[flList.size()][8];
        Iterator it = flList.iterator();
        String[] columnNames = {"Farm Field ID", "Field Name", "Area", "North Border", "East Border", "South Border", "West Border", "Observations"};
        currentReport = new ArrayList(flList.size() + 2);//for the save as txt functio
        currentReport.add(columnNames);
        int o = 0;
        while (it.hasNext()) {
            String[] a = (String[]) it.next();
            d[o] = a;
            currentReport.add(a);//fill the rest of the list with the lines of the report
            o++;
        }


        if (flList.size() > 0) {
            reportTable.setModel(new MyTableModel(d, columnNames));
            reportTable.setAutoCreateRowSorter(true);//add a primitive sort by column function
        }

    }

    private void reportCropFields() {

        SelectAllCropFieldsDetails cropFIDS = new SelectAllCropFieldsDetails();
        java.util.ArrayList cIdList = cropFIDS.getAllRows();
        Object[][] d = new Object[cIdList.size()][4];
        Iterator it = cIdList.iterator();
        String[] columnNames = {"Crop Field ID", "Crop Type", "Farm Field", "Crop Details"};
        currentReport = new ArrayList(cIdList.size() + 2);//for the save as txt functio
        currentReport.add(columnNames);
        int o = 0;
        while (it.hasNext()) {
            String[] a = (String[]) it.next();
            d[o] = a;
            currentReport.add(a);//fill the rest of the list with the lines of the report
            o++;
        }

        final Object d1[][] = d;
        if (cIdList.size() > 0) {
            reportTable.setModel(new MyTableModel(d, columnNames));
            reportTable.setAutoCreateRowSorter(true);//add a primitive sort by column function
        }

    }

    /**
     *
     * this little method checks if a plot panel is registred with the tabs and removes it
     * in order to draw the new one
     *
     */
    private void removeOldPlotPanel() {
        if (plPanel != null) {
            tabs.remove(plPanel);
        }
    }

    /**
     * method used to export the database into csv's
     *
     * @param filename
     * @param a
     */
    private void writeFile(String filename, ArrayList a) {
        MyFileWriter m = new MyFileWriter();
        m.createFile(filename);
        Iterator i = a.iterator();
        while (i.hasNext()) {
            String nextLine = (String) i.next();
            if (nextLine.length() > 0) {
                System.out.println(nextLine);
                m.writeToFile(nextLine);
            }
        }
        m.closeFile();
    }

    private void writeFile(String filename, String a) {
        MyFileWriter m = new MyFileWriter();
        m.createFile(filename);
        m.writeToFile(a);
        m.closeFile();
    }

    /**
     * this method can be used to write a file
     * in a new separate thread
     * @param filename
     * @param a
     */
    private void writeFileNewThread(String filename, String a) {
        NewThreadFileWriter m = new NewThreadFileWriter(filename, a);
        m.execute();
    }

    /**
     * this method can be used to write a file
     * in a new separate thread
     * @param filename
     * @param a
     */
    private void writeFileNewThread(String filename, ArrayList a) {
        String content = "";
        Iterator i = a.iterator();
        while (i.hasNext()) {
            String nextLine = (String) i.next();
            if (nextLine.length() > 0) {
                content = content + nextLine + "\n";
                System.out.println(nextLine);
            }
        }
        NewThreadFileWriter m = new NewThreadFileWriter(filename, content);
        m.execute();

    }

    /**
     * this method is used to clear the input fields at the farmfield tab
     * after an operation.
     *
     */
    private void clearFarmFields() {
        farmfieldIDTextField.setText("");
        farmFieldNameTextField.setText("");
        farmFieldSizeTextField.setText("");
        farmfieldNBorderTextField.setText("");
        farmfieldEBorderTextField.setText("");
        farmfieldSBorderTextField.setText("");
        farmfieldWBorderTextField.setText("");
        farmfieldObsTextField.setText("");
    }

    /**
     * private method used to export a table into a csv form
     *
     * @param filename
     * @param a
     */
    private void exportCsv(String filename, ArrayList a) {
        MyFileWriter m = new MyFileWriter();
        m.createFile(filename);
        System.out.println("Dumping " + filename);
        Iterator i1 = a.iterator();
        while (i1.hasNext()) {
            String nextLine = (String) i1.next();
            if (nextLine.length() > 0) {
                System.out.println(nextLine);
                m.writeToFile(nextLine);
            }
        }
        m.closeFile();
    }

    private String getDateTime() {
        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        Date date = new Date();
        return dateFormat.format(date);
    }

    /**
     *
     * this private method will be used when we want to fill a combobox with year numbers
     * @return
     */
    private String[] fillComboWithYears() {
        int startyear = 2006;
        String[] years = new String[25];
        for (int o = startyear, i = 0; i < 25; o++, i++) {
            years[i] = "" + o;
        }
        return years;
    }

    /**
     * this method will read the start and end period values
     * validate them and format them so that they have meaning
     *
     * e.g if the user chooses a start period after the end period
     * the method will reverse the choice
     */
    private String validatePeriodString(int controlNo) {
        String period = "";
        String startMonth = (String) startMonthComboBox.getSelectedItem();
        int iStartMonth = Integer.parseInt(startMonth);
        String startYear = (String) startYearComboBox.getSelectedItem();
        int iStartYear = Integer.parseInt(startYear);
        String endMonth = (String) endMonthComboBox.getSelectedItem();
        int iEndMonth = Integer.parseInt(endMonth);
        String endYear = (String) endYearComboBox.getSelectedItem();
        int iEndYear = Integer.parseInt(endYear);


        String startS = "";
        String midS = "";
        if (controlNo == 8) {//we are working with production
            startS = "and a.dateofharvest > '";
            midS = "' and a.dateofharvest < '";
        } else if (controlNo == 10) {//if we are working with applications
            startS = "and a.dateofapplication > '";
            midS = "' and a.dateofapplication < '";
        }
        if (iStartYear > iEndYear) {
            period = startS + endYear + "-" + endMonth + "-01" + midS + startYear + "-" + startMonth + "-31'";
        } else if (iStartYear == iEndYear) {
            if (iStartMonth > iEndMonth) {
                period = startS + startYear + "-" + endMonth + "-01" + midS + endYear + "-" + startMonth + "-31'";
            } else {
                period = startS + startYear + "-" + startMonth + "-01" + midS + endYear + "-" + endMonth + "-31'";
            }
        } else {
            period = startS + startYear + "-" + startMonth + "-01" + midS + endYear + "-" + endMonth + "-31'";
        }
        return period;
    }

    /**
     *
     * this method can be used to enable all the periodo combo boxes
     */
    private void enablePeriodCombos() {
        startMonthComboBox.setEnabled(true);
        startYearComboBox.setEnabled(true);
        endMonthComboBox.setEnabled(true);
        endYearComboBox.setEnabled(true);
    }

    /**
     *
     *
     * this method can be used to disable all the periodo combo boxes
     */
    private void disablePeriodCombos() {
        startMonthComboBox.setEnabled(false);
        startYearComboBox.setEnabled(false);
        endMonthComboBox.setEnabled(false);
        endYearComboBox.setEnabled(false);
    }
}
